print(x$message)
print(x$call)
writeLines(paste("\nWarning\nCannot compute log of", vec[i], "\n"))
})
}
logVector(c(1, "a"))
logVector <- function(vec){
for(i in 1:length(vec)){
tryCatch(print(log(vec[i])),
error = function(x){
writeLines(paste("\nError\nCannot compute the log of string", vec[i], "\n"))
},
warning = function(x){
writeLines(paste("\nWarning\nCannot compute log of", vec[i], "\n"))
})
}
logVector(c(1, "a"))
logVector <- function(vec){
for(i in 1:length(vec)){
tryCatch(print(log(vec[i])),
error = function(x){
writeLines(paste("\nError\nCannot compute the log of string '", vec[i], "'\n", sep = ""))
},
warning = function(x){
writeLines(paste("\nWarning\nCannot compute log of", vec[i], "\n"))
})
}
logVector(c(1, "a"))
logVector(c(1, -1))
logVector(-1
)
logVector <- function(vec){
for(i in 1:length(vec)){
tryCatch(print(log(vec[i])),
error = function(x){
writeLines(paste("\nError\nCannot compute the log of string '", vec[i], "'\n", sep = ""))
},
warning = function(x){
writeLines(paste("\nWarning\nCannot compute log of negative number", vec[i], "\n"))
})
}
logVector(-1)
logVector(c(1,2,3))
logVector(c(1,-2,3))
logVector <- function(vec){
for(i in 1:length(vec)){
tryCatch(print("log of", vec[i], "is", log(vec[i])),
error = function(x){
writeLines(paste("\nError\nCannot compute the log of string '", vec[i], "'\n", sep = ""))
},
warning = function(x){
writeLines(paste("\nWarning\nCannot compute log of negative number", vec[i], "\n"))
})
}
logVector(c(1,-2,3))
logVector <- function(vec){
for(i in 1:length(vec)){
tryCatch(print(paste("log of", vec[i], "is", log(vec[i]))),
error = function(x){
writeLines(paste("\nError\nCannot compute the log of string '", vec[i], "'\n", sep = ""))
},
warning = function(x){
writeLines(paste("\nWarning\nCannot compute log of negative number", vec[i], "\n"))
})
}
logVector(c(1,-2,3))
logVector(c(1,-2,"a"))
logVector <- function(vec){
for(i in 1:length(vec)){
tryCatch(print(paste("log of", vec[i], "is", log(vec[i]))),
error = function(x){
writeLines(paste("Error\nCannot compute the log of string '", vec[i], "'\n", sep = ""))
},
warning = function(x){
writeLines(paste("Warning\nCannot compute log of negative number", vec[i], "\n"))
})
}
logVector(c(1,-2,"a"))
logVector(c(1,2,3))
logVector(c(1,-2,3))
logVector <- function(vec){
for(i in 1:length(vec)){
tryCatch(print(paste("log of", vec[i], "is", log(vec[i]))),
error = function(x){
writeLines(paste("Error\nCannot compute the log of string '", vec[i], "'", sep = ""))
},
warning = function(x){
writeLines(paste("Warning\nCannot compute log of negative number", vec[i]))
})
}
logVector(c(1,2,3))
logVector(c(1,-2,3))
logVector(c(1,-2,"a"))
logVector(0)
r0.618
r <- 0.618
re <- sqrt(1-r^2)
x <- rnorm(1000)
y <- x*r + rnorm(1000)*re
y[x<0] <- -y[x<0]
par(mar=rep(0,4))
plot(x, y, col=rgb(1,0,1), axes=F, asp=1)
x <- rnorm(100000)
y <- x*r + rnorm(1000)*re
y[x<0] <- -y[x<0]
plot(x, y, col=rgb(1,0,1), axes=F, asp=1)
x <- rnorm(10000)
y <- x*r + rnorm(1000)*re
y[x<0] <- -y[x<0]
plot(x, y, col=rgb(1,0,1), axes=F, asp=1)
myDataFrame <- data.frame(x = 1:3, y = -4:-6, z = LETTERS[1:3])
myDataFrame[[1]]
myDataFrame
myDataFrame[[1,]]
myDataFrame[1,]
order(c(NA,4,2,7,2,9))
order(c(NA,4,2,7,2,9), na.last = F)
order(c(NA,4,2,7,2,9), decreasing = T)
order(c(NA,4,2,7,2,9), decreasing = F)
?length
a=c()
length(a) <- 5
a
(5/13)*.5 + (7/10)*.5
(5/26) / ((5/13)*.5 + (7/10)*.5)
5/26+7/20
(5/26)/(5/26+7/20)
s <- state.x77
lapplyResult <- lapply(3:8, function(i) return(cor(s[ ,2], s[ ,i])))
str(lapplyResult)
sapplyResult = sapply(3:8, function(i) return(cor(s[, 2], s[, i])))
str(sapplyResult)
tapply(s[, "Area"], state.region, sum)
names(s)
colnames(s)
head(s$Area)
head(s[, "Area"])
names(s[, "Area"])
state.region
paste("x", 1:5, "y", sep="")
paste("x", 1:5, "y", sep="_")
paste("x", 1:5, "y", sep="_", collapse=" ")
paste(letters, LETTERS, sep="", collapse="+")
paste(letters, LETTERS, sep="", collapse=";")
(myStr_05 <- 'my tiny bed')
substring(myStr_05, first = c(1, 4, 9))
myStr_10 <- c("94112 94117", "H8P 2S5", " 90210", "47907-1233")
gregexpr("[0-9]{5}", myStr_10, fixed=T)
gregexpr("[0-9]{5}", myStr_10, fixed=F)
regmatches(myStr_10, gregexpr("[0-9]{5}", myStr_10))
as.vector(regmatches(myStr_10, gregexpr("[0-9]{5}", myStr_10)))
as.numeric(regmatches(myStr_10, gregexpr("[0-9]{5}", myStr_10)))
as.data.frame(regmatches(myStr_10, gregexpr("[0-9]{5}", myStr_10)))
regmatches(myStr_10, gregexpr("[0-9]{5}", myStr_10))
unlist(regmatches(myStr_10, gregexpr("[0-9]{5}", myStr_10)))
?regexp
library(ggplot2)
library(lubridate)
library(magrittr)
library(corrplot)
library(tidyr)
alphas <- c(0.5, 5, 1, 2, 2)
betas <- c(0.5, 1, 3, 2, 5)
x <- seq(0, 1, 0.001)
pdf <- data.frame(
"x" = x,
"y1" = dbeta(x, alphas[1], betas[1]),
"y2" = dbeta(x, alphas[2], betas[2]),
"y3" = dbeta(x, alphas[3], betas[3]),
"y4" = dbeta(x, alphas[4], betas[4]),
"y5" = dbeta(x, alphas[5], betas[5])
)
pdf <- gather(pdf, tuple, y, y1, y2, y3, y4, y5)
pdf$tuple <- as.factor(pdf$tuple)
n <- 10000
cdf <- data.frame(
"x" = c(rbeta(n, alphas[1], betas[1]),
rbeta(n, alphas[2], betas[2]),
rbeta(n, alphas[3], betas[3]),
rbeta(n, alphas[4], betas[4]),
rbeta(n, alphas[5], betas[5])),
"tuple" = gl(5, n)
)
library(ggplot2)
library(lubridate)
library(magrittr)
library(corrplot)
library(tidyr)
library(scales)
library(reshape2)
alphas <- c(0.5, 5, 1, 2, 2)
betas <- c(0.5, 1, 3, 2, 5)
x <- seq(0, 1, length.out = 5000)
pdf <- data.frame(
"x" = x,
"y1" = dbeta(x, alphas[1], betas[1]),
"y2" = dbeta(x, alphas[2], betas[2]),
"y3" = dbeta(x, alphas[3], betas[3]),
"y4" = dbeta(x, alphas[4], betas[4]),
"y5" = dbeta(x, alphas[5], betas[5])
)
pdf <- gather(pdf, tuple, y, y1, y2, y3, y4, y5)
pdf$tuple <- as.factor(pdf$tuple)
cdf <- data.frame(
"x" = x,
"y1" = pbeta(x, alphas[1], betas[1]),
"y2" = pbeta(x, alphas[2], betas[2]),
"y3" = pbeta(x, alphas[3], betas[3]),
"y4" = pbeta(x, alphas[4], betas[4]),
"y5" = pbeta(x, alphas[5], betas[5])
)
cdf <- gather(cdf, tuple, y, y1, y2, y3, y4, y5)
cdf$tuple <- as.factor(cdf$tuple)
ggplot(df, aes(x, y, colour = tuple)) +
geom_line(size = .5) +
facet_grid(tuple ~ pdfOrCdf, scales = "free", labeller = label_bquote(rows = paste("(", list(alpha, beta), ")") == .(as.character(tuple))))
df <- cbind(pdf, cdf)
df <- df[-c(4, 5)]
names(df) <- c("x", "tuple", "pdf_y", "cdf_y")
df <- gather(df, pdfOrCdf, y, pdf_y, cdf_y)
df$pdfOrCdf <- factor(df$pdfOrCdf)
df <- subset(df, !(df$y >=5))
ggplot(df, aes(x, y, colour = tuple)) +
geom_line(size = .5) +
facet_grid(tuple ~ pdfOrCdf, scales = "free", labeller = label_bquote(rows = paste("(", list(alpha, beta), ")") == .(as.character(tuple))))
df <- cbind(pdf, cdf)
df <- df[-c(4, 5)]
names(df) <- c("x", "tuple", "PDF", "CDY")
head(df)
ggplot(df, aes(x, y, colour = tuple)) +
geom_line(size = .5) +
facet_grid(tuple ~ pdfOrCdf, scales = "free", labeller =
label_bquote(rows =
paste("(",
list(alpha, beta),
")") == .(as.character(
tuple)))) +
theme()
ggplot(df, aes(x, y, colour = tuple)) +
geom_line(size = .5) +
facet_grid(tuple ~ pdfOrCdf, scales = "free", labeller =
label_bquote(rows =
paste("(",
list(alpha, beta),
")") == .(as.character(
tuple))))
ggplot(df, aes(x, y, colour = tuple)) +
geom_line(size = .5) +
facet_grid(tuple ~ pdfOrCdf, scales = "free", labeller = label_bquote(rows = paste("(", list(alpha, beta), ")") == .(as.character(tuple))))
df <- cbind(pdf, cdf)
df <- df[-c(4, 5)]
names(df) <- c("x", "tuple", "PDF", "CDY")
df <- gather(df, pdfOrCdf, y, PDF, CDF)
df$pdfOrCdf <- factor(df$pdfOrCdf)
names(df) <- c("x", "tuple", "PDF", "CDF")
df <- gather(df, pdfOrCdf, y, PDF, CDF)
df$pdfOrCdf <- factor(df$pdfOrCdf)
df <- subset(df, !(df$y >=5))
ggplot(df, aes(x, y, colour = tuple)) +
geom_line(size = .5) +
facet_grid(tuple ~ pdfOrCdf, scales = "free", labeller = label_bquote(rows = paste("(", list(alpha, beta), ")") == .(as.character(tuple))))
tuple_names <- c(
y1 = eval(expression(paste("(", alphas[1], ", ", betas[1], ")", sep = ""))),
y2 = eval(expression(paste("(", alphas[2], ", ", betas[2], ")", sep = ""))),
y3 = eval(expression(paste("(", alphas[3], ", ", betas[3], ")", sep = ""))),
y4 = eval(expression(paste("(", alphas[4], ", ", betas[4], ")", sep = ""))),
y5 = eval(expression(paste("(", alphas[5], ", ", betas[5], ")", sep = "")))
)
ggplot(df, aes(x, y, colour = tuple)) +
geom_line(size = .5) +
facet_grid(tuple ~ pdfOrCdf, scales = "free", labeller = label_bquote(rows = paste("(", list(alpha, beta), ")") == .(as.character(tuple_names))))
tuple_names <- list(
y1 = eval(expression(paste("(", alphas[1], ", ", betas[1], ")", sep = ""))),
y2 = eval(expression(paste("(", alphas[2], ", ", betas[2], ")", sep = ""))),
y3 = eval(expression(paste("(", alphas[3], ", ", betas[3], ")", sep = ""))),
y4 = eval(expression(paste("(", alphas[4], ", ", betas[4], ")", sep = ""))),
y5 = eval(expression(paste("(", alphas[5], ", ", betas[5], ")", sep = "")))
)
tuple_names
ggplot(df, aes(x, y, colour = tuple)) +
geom_line(size = .5) +
facet_grid(tuple ~ pdfOrCdf, scales = "free", labeller = label_bquote(rows = paste("(", list(alpha, beta), ")") == .(as.character(tuple_names))))
cdf <- data.frame(
"x" = x,
eval(expression(paste("(", alphas[1], ", ", betas[1], ")", sep = ""))) = pbeta(x, alphas[1], betas[1]),
eval(expression(paste("(", alphas[2], ", ", betas[2], ")", sep = ""))) = pbeta(x, alphas[2], betas[2]),
cdf <- data.frame(
"x" = x,
eval(expression(paste("(", alphas[1], ", ", betas[1], ")", sep = ""))) = pbeta(x, alphas[1], betas[1]),
cdf <- data.frame(
"x" = x,
expression(paste("(", alphas[1], ", ", betas[1], ")", sep = "")) = pbeta(x, alphas[1], betas[1]),
cdf <- data.frame(
"x" = x,
as.character(eval(expression(paste("(", alphas[1], ", ", betas[1], ")", sep = "")))) = pbeta(x, alphas[1], betas[1]),
library(reshape1)
library(reshape2)
?dcast
?aggregate
faithful
install.packages("car")
setwd("~/Documents/msan601")
copier = read.csv("copierMaintenanceData.csv")
setwd("~/Documents/msan601/HW1")
copier = read.csv("copierMaintenanceData.csv")
copier = read.csv("copierMaintenanceData.csv", header = F)
b1 = (sum((copier$V2 - mean(copier$V2))*(copier$V1 - mean(copier$V1))))/(sum((copier$V2 - mean(copier$V2))^2))
b0 = mean(copier$V1) - b1*mean(copier$V2)
plot(copier$V2, copier$V1)
summary(lm(copier$V2~copier$V1))
summary(lm(copier$V1~copier$V2))
SSE = sum((copier$V1 - (b0 + b1*copier$V2))^2)
anova(lm(copier$V1~copier$V2))
print("no")
print("y_hat{i} = b0 + b1*X{i}")
b0+b1*5
sum((copier$V1 - (b0 + b1*copier$V2)))
b0+b1*5
MSE = SSE/(length(copier$V1) - 2)
s2b1 = MSE/(sum((copier$V2 - mean(copier$V2))^2))
t_star = b1/s2b1
qt(1-.05/2, length(copier$V2-2))
t_lim = qt(1-.05/2, length(copier$V2-2))
t_lim_2 = qt(1-.05, length(copier$V2-2))
y5 = b0+b1*5
n = length(copier$V1)
t_lim = qt(1-.05/2, n-2)
t_lim_2 = qt(1-.05, n-2)
MSE = SSE/(n - 2)
s2b1 = MSE/(sum((copier$V2 - mean(copier$V2))^2))
t_star = b1/s2b1
t_lim = qt(1-.05/2, n-2)
t_lim_2 = qt(1-.05, n-2)
s2y5 = MSE * (1/n + ((5 - mean(copier$V2))^2)/(sum((copier$V2 - mean(copier$V2))^2)))
lower = y5 - t_lim*s2y5
upper = y5 + t_lim*s2y5
t_lim*s2y5
SSR = sum(b0 + b1*copier$V2 - mean(copier$V1))
SSR = sum((b0 + b1*copier$V2 - mean(copier$V1))^2)
sum((copier$V1 - mean(copier$V1))^2)
SSR+SSE
SSR = sum((b0 + b1*copier$V2 - mean(copier$V1))^2)
MSR = SSR/1
F_star = MSR/MSE
qf(1-.05/2, 1, n-2)
f_lim = qf(1-.05/2, 1, n-2)
F_lim = qf(1-.05/2, 1, n-2)
t_star^2
F_star
F_star/2
t_star
sqrt(F_star)
t_star^2
t_star^2 / 4
summary(lm(copier$V1~copier$V2))
anova(lm(copier$V1~copier$V2))
MSE = SSE/(n - 2)
s2b1 = MSE/(sum((copier$V2 - mean(copier$V2))^2))
t_star = b1/s2b1
t_star/2
MSE
summary(lm(copier$V1~copier$V2))
MSE
t_star = b1/sqrt(s2b1)
lower = y5 - t_lim*sqrt(s2y5)
upper = y5 + t_lim*sqrt(s2y5)
t_lim*sqrt(s2y5)
t_star^2
t_star_sq = t_star^2
vec_b0 = c(0, -1, 1)
vec_b1 = c(10, 15, 15)
for(i in seq_along(vec_b0)){
vec_fitted = vec_b0[i] + vec_b1[i]*copier$V2
}
for(i in seq_along(vec_b0)){
vec_fitted = vec_b0[i] + vec_b1[i]*copier$V2
vec_SSE = sum((copier$V1 - (vec_b0[i] + vec_b1[i]*copier$V2))^2)
print(vec_SSE)
}
vec_b0 = c(0, -1, 1, 0)
vec_b1 = c(10, 15, 15, 15)
for(i in seq_along(vec_b0)){
vec_fitted = vec_b0[i] + vec_b1[i]*copier$V2
vec_SSE = sum((copier$V1 - (vec_b0[i] + vec_b1[i]*copier$V2))^2)
print(vec_SSE)
}
vec_b0 = c(0, 0, 0, 1, 5)
vec_b1 = c(15, 10, 20, 15, 25)
for(i in seq_along(vec_b0)){
vec_fitted = vec_b0[i] + vec_b1[i]*copier$V2
vec_SSE = sum((copier$V1 - (vec_b0[i] + vec_b1[i]*copier$V2))^2)
print(vec_SSE)
}
for(i in seq_along(vec_b0)){
vec_fitted = vec_b0[i] + vec_b1[i]*copier$V2
vec_SSE = sum((copier$V1 - (vec_b0[i] + vec_b1[i]*copier$V2))^2)
print(paste("For b0=", vec_b0[i], ", and b1=", vec_b1[i], ", we get SSE=", vec_SSE))
}
for(i in seq_along(vec_b0)){
vec_fitted = vec_b0[i] + vec_b1[i]*copier$V2
vec_SSE = sum((copier$V1 - (vec_b0[i] + vec_b1[i]*copier$V2))^2)
print(paste("For b0=", vec_b0[i], "and b1=", vec_b1[i], ", we get SSE=", vec_SSE))
}
vec_b0 = c(0, 0, 0, 1, -1, 10)
vec_b1 = c(15, 10, 20, 15, 15, 25)
for(i in seq_along(vec_b0)){
vec_fitted = vec_b0[i] + vec_b1[i]*copier$V2
vec_SSE = sum((copier$V1 - (vec_b0[i] + vec_b1[i]*copier$V2))^2)
print(paste("For b0=", vec_b0[i], "and b1=", vec_b1[i], ", we get SSE=", vec_SSE))
}
vec_b0 = c(0, 0, 0, 1, -1, 10)
vec_b1 = c(15, 10, 20, 15, 15, 25)
for(i in seq_along(vec_b0)){
vec_fitted = vec_b0[i] + vec_b1[i]*copier$V2
vec_SSE = sum((copier$V1 - (vec_b0[i] + vec_b1[i]*copier$V2))^2)
print(paste("For b0 =", vec_b0[i], "and b1 =", vec_b1[i], ", we get SSE =", vec_SSE))
}
df9 = data.frame(
"Country" = c("Philippines",
"Mexico",
"Colombia",
"Yugoslavia",
"Panama",
"Romania",
"Czechoslovakia",
"Spain",
"Finland",
"United Kingdom",
"Canada",
"France",
"Australia",
"United States",
"Sweden"),
"DietaryFat" = c(29,
57,
47,
72,
58,
67,
96,
97,
112,
143,
142,
137,
129,
147,
132),
"DeathRate" = c(1.3,
4.5,
5.4,
5.6,
7.8,
8.8,
9.1,
10.1,
11.7,
12.4,
13.4,
14.4,
15.1,
16.3,
18.4)
)
lm9 = lm(DeathRate ~ DietaryFat, data = df9)
plot(df9$DeathRate ~ df9$DietaryFat)
abline(lm9)
summary(lm9)
plot(DeathRate ~ DietaryFat, data = df9)
text(df9$DietaryFat, df9$DeathRate, df9$Country)
plot(DeathRate ~ DietaryFat, data = df9)
text(df9$DietaryFat, df9$DeathRate, df9$Country, cex = .7, pos = 3)
text(df9$DietaryFat, df9$DeathRate, df9$Country, cex = .7, pos = 1)
plot(DeathRate ~ DietaryFat, data = df9)
text(df9$DietaryFat, df9$DeathRate, df9$Country, cex = .7, pos = 1)
text(df9$DietaryFat, df9$DeathRate, df9$Country, cex = .7, pos = 2)
plot(DeathRate ~ DietaryFat, data = df9)
text(df9$DietaryFat, df9$DeathRate, df9$Country, cex = .7, pos = 2)
text(df9$DietaryFat, df9$DeathRate, df9$Country, cex = .7, pos = 4)
text(df9$DietaryFat, df9$DeathRate, df9$Country, cex = .7, pos = 5)
text(df9$DietaryFat, df9$DeathRate, df9$Country, cex = .7, pos = 2)
plot(DeathRate ~ DietaryFat, data = df9)
text(df9$DietaryFat, df9$DeathRate, df9$Country, cex = .7, pos = 2)
plot(DeathRate ~ DietaryFat, data = df9, xlim = 20)
plot(DeathRate ~ DietaryFat, data = df9, xlim = c(20, 120))
text(df9$DietaryFat, df9$DeathRate, df9$Country, cex = .7, pos = 2)
plot(DeathRate ~ DietaryFat, data = df9)#, xlim = c(20, 120))
plot(DeathRate ~ DietaryFat, data = df9, xlim = c(20, 150))
text(df9$DietaryFat, df9$DeathRate, df9$Country, cex = .7, pos = 2)
lm9 = lm(DeathRate ~ DietaryFat, data = df9)
summary(lm9)
cbind(Estimate=coef(lm9), confint(lm9))
faithful
summary(eruptions ~ waiting, faithful)
summary(lm(eruptions ~ waiting, faithful))
summary(lm(waiting ~ eruptions, faithful))
summary(lm(eruptions ~ waiting, faithful))
summary(lm(waiting ~ eruptions, faithful))
X = c(1:100)
Y = X ** 2
lm(Y ~ X)
plot(Y~X)
summary(lm(Y ~ X))
summary(lm(Y ~ X))$r.squared
X = c(1:100)
Y = 2 * X
summary(lm(Y ~ X))$r.squared
anova(lm(data = faithful, eruptions ~ waiting))
anova(lm(data = faithful, waiting ~ eruptions))
summary(lm(waiting ~ eruption, data = faithful))
summary(lm(waiting ~ eruptions, data = faithful))
summary(lm(eruptions ~ waiting, data = faithful))
