simulation$auxilliary <- dexp(simulation$Y, lambda) # g(Y)
simulation$target <- dgamma(simulation$Y, alpha, beta) # f(Y)
c <- 1.3601
simulation$accept <- ifelse(simulation$unif < simulation$target/(c*simulation$auxilliary),
T, F) # accept if U<f/(c*g)
hist(simulation$Y[simulation$accept], freq=F, breaks=75, ylim=c(0, 0.55), xlim=c(0, 8),
main="Histogram of realizations generated
for the Gamma random variable", xlab="x")
curve(dgamma(x, alpha, beta), 0, 8, add=T, col="red")
legend(3, 0.5, paste("Gamma(", alpha, ",", beta, ")"), lty=1, col="red")
lambda <- alpha/(alpha+beta)#1/beta
n <- 15000
simulation <- data.frame(unif = runif(n, 0, 1)) # U~unif(0, 1)
simulation$Y <- rexp(n, lambda) # Y~Exp(1/beta)
simulation$auxilliary <- dexp(simulation$Y, lambda) # g(Y)
simulation$target <- dgamma(simulation$Y, alpha, beta) # f(Y)
c <- 1.3601
simulation$accept <- ifelse(simulation$unif < simulation$target/(c*simulation$auxilliary),
T, F) # accept if U<f/(c*g)
hist(simulation$Y[simulation$accept], freq=F, breaks=75, ylim=c(0, 0.55), xlim=c(0, 8),
main="Histogram of realizations generated
for the Gamma random variable", xlab="x")
curve(dgamma(x, alpha, beta), 0, 8, add=T, col="red")
legend(3, 0.5, paste("Gamma(", alpha, ",", beta, ")"), lty=1, col="red")
writeLines(paste(sum(simulation$accept), "realizations of the Gamma distribution
lambda <- 1/beta#alpha/(alpha+beta)#1/beta
n <- 15000
simulation <- data.frame(unif = runif(n, 0, 1)) # U~unif(0, 1)
simulation$Y <- rexp(n, lambda) # Y~Exp(1/beta)
simulation$auxilliary <- dexp(simulation$Y, lambda) # g(Y)
simulation$target <- dgamma(simulation$Y, alpha, beta) # f(Y)
c <- 1.3601
simulation$accept <- ifelse(simulation$unif < simulation$target/(c*simulation$auxilliary),
T, F) # accept if U<f/(c*g)
hist(simulation$Y[simulation$accept], freq=F, breaks=75, ylim=c(0, 0.55), xlim=c(0, 8),
main="Histogram of realizations generated
for the Gamma random variable", xlab="x")
curve(dgamma(x, alpha, beta), 0, 8, add=T, col="red")
legend(3, 0.5, paste("Gamma(", alpha, ",", beta, ")"), lty=1, col="red")
writeLines(paste(sum(simulation$accept), "realizations of the Gamma distribution
out of", n, "realizations of the exponential distribution."))
1/beta
.5*log((1+0.65)/(1-0.6))
.5*log10((1+0.65)/(1-0.6))
.5*log((1+0.65)/(1-0.65))
myFunc_13 <- function(arg1, arg2) {
any(c(missing(arg1), missing(arg2)))
}
myFunc_13()
myFunc_13(1)
myFunc_13(1,2)
ls()
myFunc_17 <- function(a = ls()){
z <- 10
a
}
myFunc_17()
myFunc_17(4)
myFunc_17(ls())
getwd()
myFunc_17(getwd())
f <- function(){
for(i in 1:10){
if(x == 5){return()}
}
f <- function(x){
for(i in 1:10){
if(x == 5){return()}
}
f <- function(x){
for(i in 1:10){
if(x == 5){return()}
}
print(7)
}
f(1)
f(5)
f <- function(x){
for(i in 1:10){
if(x == 5){return(x)}
}
print(7)
}
f(5)
f(1)
myFunc <- function(firstRow, lastRow){
iris[firstRow:lastRow]
}
myFunc(1,3)
myFunc <- function(firstRow, lastRow){
iris[firstRow:lastRow,]
}
myFunc(1,3)
myFunc(firstRow = 1, lastRow = 3)
myFunc3 <- function(firstRow = 1, lastRow = 10, myDataFrame = iris){
force(firstRow)
force(lastRow)
force(myDataFrame)
myDataFrame[firstRow:lastRow,]
}
myFunc3()
myFunc3(jane)
myFunc3(3)
myFunc1(jane)
myFunc(jane)
myFunc <- function(firstRow=1, lastRow=3){
iris[firstRow:lastRow,]
}
myFunc(jane)
myFunc <- function(firstRow, lastRow){
iris[firstRow:lastRow,]
}
myFunc(firstRow = 1, lastRow = 3)
#formal: firstRow, lastRow
#calling: 1, 3
myFunc2 <- function(firstRow, lastRow, myDataFrame){
myDataFrame[firstRow:lastRow,]
}
myFunc2(1, 3, irs)
myFunc2(1, 3, iris)
myFunc3 <- function(firstRow = 1, lastRow = 10, myDataFrame = iris){
force(firstRow)
force(lastRow)
force(myDataFrame)
myDataFrame[firstRow:lastRow,]
}
myFunc3()
?codetools::findFuncLocals()
?codetools::findFuncLocals
codetools::findGlobals(myFunc)
myFunc2(1, 3, mtcars)
myFunc3 <- function(firstRow = 1, lastRow = 10, myDataFrame = iris){
force(c(firstRow, lastRow, myDataFrame))
myDataFrame[firstRow:lastRow,]
}
myFunc3()
myFunc3(jane)
"a +"b
1:1
length(c(1,2,3,4))
logVector <- function(vec){
for(i in 1:length(vec)){
tryCatch(print(log(vec[i])),
error = function(x){
print(x$message)
print(x$call)
writeLines("\nError\n")
})
}
logVector(1)
logVector(2)
logVector(c(1, 2))
logVector(c(1, -2))
logVector <- function(vec){
for(i in 1:length(vec)){
tryCatch(print(log(vec[i])),
error = function(x){
print(x$message)
print(x$call)
writeLines("\nError\n")
},
warning = function(x){
print(x$message)
print(x$call)
writeLines("\nWarning\nCannot compute log of", vec[i], "\n")
})
}
logVector(c(1, -2))
logVector <- function(vec){
for(i in 1:length(vec)){
tryCatch(print(log(vec[i])),
error = function(x){
print(x$message)
print(x$call)
writeLines("\nError\n")
},
warning = function(x){
print(x$message)
print(x$call)
writeLines(paste("\nWarning\nCannot compute log of", vec[i], "\n"))
})
}
logVector(c(1, -2))
logVector(c(1, "a"))
logVector <- function(vec){
for(i in 1:length(vec)){
tryCatch(print(log(vec[i])),
error = function(x){
print(x$message)
print(x$call)
writeLines(paste("\nError\nCannot compute the log of", vec[i], "\n"))
},
warning = function(x){
print(x$message)
print(x$call)
writeLines(paste("\nWarning\nCannot compute log of", vec[i], "\n"))
})
}
logVector(c(1, "a"))
logVector <- function(vec){
for(i in 1:length(vec)){
tryCatch(print(log(vec[i])),
error = function(x){
print(x$message)
print(x$call)
writeLines(paste("\nError\nCannot compute the log of string", vec[i], "\n"))
},
warning = function(x){
print(x$message)
print(x$call)
writeLines(paste("\nWarning\nCannot compute log of", vec[i], "\n"))
})
}
logVector(c(1, "a"))
logVector <- function(vec){
for(i in 1:length(vec)){
tryCatch(print(log(vec[i])),
error = function(x){
writeLines(paste("\nError\nCannot compute the log of string", vec[i], "\n"))
},
warning = function(x){
writeLines(paste("\nWarning\nCannot compute log of", vec[i], "\n"))
})
}
logVector(c(1, "a"))
logVector <- function(vec){
for(i in 1:length(vec)){
tryCatch(print(log(vec[i])),
error = function(x){
writeLines(paste("\nError\nCannot compute the log of string '", vec[i], "'\n", sep = ""))
},
warning = function(x){
writeLines(paste("\nWarning\nCannot compute log of", vec[i], "\n"))
})
}
logVector(c(1, "a"))
logVector(c(1, -1))
logVector(-1
)
logVector <- function(vec){
for(i in 1:length(vec)){
tryCatch(print(log(vec[i])),
error = function(x){
writeLines(paste("\nError\nCannot compute the log of string '", vec[i], "'\n", sep = ""))
},
warning = function(x){
writeLines(paste("\nWarning\nCannot compute log of negative number", vec[i], "\n"))
})
}
logVector(-1)
logVector(c(1,2,3))
logVector(c(1,-2,3))
logVector <- function(vec){
for(i in 1:length(vec)){
tryCatch(print("log of", vec[i], "is", log(vec[i])),
error = function(x){
writeLines(paste("\nError\nCannot compute the log of string '", vec[i], "'\n", sep = ""))
},
warning = function(x){
writeLines(paste("\nWarning\nCannot compute log of negative number", vec[i], "\n"))
})
}
logVector(c(1,-2,3))
logVector <- function(vec){
for(i in 1:length(vec)){
tryCatch(print(paste("log of", vec[i], "is", log(vec[i]))),
error = function(x){
writeLines(paste("\nError\nCannot compute the log of string '", vec[i], "'\n", sep = ""))
},
warning = function(x){
writeLines(paste("\nWarning\nCannot compute log of negative number", vec[i], "\n"))
})
}
logVector(c(1,-2,3))
logVector(c(1,-2,"a"))
logVector <- function(vec){
for(i in 1:length(vec)){
tryCatch(print(paste("log of", vec[i], "is", log(vec[i]))),
error = function(x){
writeLines(paste("Error\nCannot compute the log of string '", vec[i], "'\n", sep = ""))
},
warning = function(x){
writeLines(paste("Warning\nCannot compute log of negative number", vec[i], "\n"))
})
}
logVector(c(1,-2,"a"))
logVector(c(1,2,3))
logVector(c(1,-2,3))
logVector <- function(vec){
for(i in 1:length(vec)){
tryCatch(print(paste("log of", vec[i], "is", log(vec[i]))),
error = function(x){
writeLines(paste("Error\nCannot compute the log of string '", vec[i], "'", sep = ""))
},
warning = function(x){
writeLines(paste("Warning\nCannot compute log of negative number", vec[i]))
})
}
logVector(c(1,2,3))
logVector(c(1,-2,3))
logVector(c(1,-2,"a"))
logVector(0)
r0.618
r <- 0.618
re <- sqrt(1-r^2)
x <- rnorm(1000)
y <- x*r + rnorm(1000)*re
y[x<0] <- -y[x<0]
par(mar=rep(0,4))
plot(x, y, col=rgb(1,0,1), axes=F, asp=1)
x <- rnorm(100000)
y <- x*r + rnorm(1000)*re
y[x<0] <- -y[x<0]
plot(x, y, col=rgb(1,0,1), axes=F, asp=1)
x <- rnorm(10000)
y <- x*r + rnorm(1000)*re
y[x<0] <- -y[x<0]
plot(x, y, col=rgb(1,0,1), axes=F, asp=1)
myDataFrame <- data.frame(x = 1:3, y = -4:-6, z = LETTERS[1:3])
myDataFrame[[1]]
myDataFrame
myDataFrame[[1,]]
myDataFrame[1,]
order(c(NA,4,2,7,2,9))
order(c(NA,4,2,7,2,9), na.last = F)
order(c(NA,4,2,7,2,9), decreasing = T)
order(c(NA,4,2,7,2,9), decreasing = F)
?length
a=c()
length(a) <- 5
a
(5/13)*.5 + (7/10)*.5
(5/26) / ((5/13)*.5 + (7/10)*.5)
5/26+7/20
(5/26)/(5/26+7/20)
s <- state.x77
lapplyResult <- lapply(3:8, function(i) return(cor(s[ ,2], s[ ,i])))
str(lapplyResult)
sapplyResult = sapply(3:8, function(i) return(cor(s[, 2], s[, i])))
str(sapplyResult)
tapply(s[, "Area"], state.region, sum)
names(s)
colnames(s)
head(s$Area)
head(s[, "Area"])
names(s[, "Area"])
state.region
paste("x", 1:5, "y", sep="")
paste("x", 1:5, "y", sep="_")
paste("x", 1:5, "y", sep="_", collapse=" ")
paste(letters, LETTERS, sep="", collapse="+")
paste(letters, LETTERS, sep="", collapse=";")
(myStr_05 <- 'my tiny bed')
substring(myStr_05, first = c(1, 4, 9))
myStr_10 <- c("94112 94117", "H8P 2S5", " 90210", "47907-1233")
gregexpr("[0-9]{5}", myStr_10, fixed=T)
gregexpr("[0-9]{5}", myStr_10, fixed=F)
regmatches(myStr_10, gregexpr("[0-9]{5}", myStr_10))
as.vector(regmatches(myStr_10, gregexpr("[0-9]{5}", myStr_10)))
as.numeric(regmatches(myStr_10, gregexpr("[0-9]{5}", myStr_10)))
as.data.frame(regmatches(myStr_10, gregexpr("[0-9]{5}", myStr_10)))
regmatches(myStr_10, gregexpr("[0-9]{5}", myStr_10))
unlist(regmatches(myStr_10, gregexpr("[0-9]{5}", myStr_10)))
?regexp
library(ggplot2)
library(lubridate)
library(magrittr)
library(corrplot)
library(tidyr)
alphas <- c(0.5, 5, 1, 2, 2)
betas <- c(0.5, 1, 3, 2, 5)
x <- seq(0, 1, 0.001)
pdf <- data.frame(
"x" = x,
"y1" = dbeta(x, alphas[1], betas[1]),
"y2" = dbeta(x, alphas[2], betas[2]),
"y3" = dbeta(x, alphas[3], betas[3]),
"y4" = dbeta(x, alphas[4], betas[4]),
"y5" = dbeta(x, alphas[5], betas[5])
)
pdf <- gather(pdf, tuple, y, y1, y2, y3, y4, y5)
pdf$tuple <- as.factor(pdf$tuple)
n <- 10000
cdf <- data.frame(
"x" = c(rbeta(n, alphas[1], betas[1]),
rbeta(n, alphas[2], betas[2]),
rbeta(n, alphas[3], betas[3]),
rbeta(n, alphas[4], betas[4]),
rbeta(n, alphas[5], betas[5])),
"tuple" = gl(5, n)
)
library(ggplot2)
library(lubridate)
library(magrittr)
library(corrplot)
library(tidyr)
library(scales)
library(reshape2)
alphas <- c(0.5, 5, 1, 2, 2)
betas <- c(0.5, 1, 3, 2, 5)
x <- seq(0, 1, length.out = 5000)
pdf <- data.frame(
"x" = x,
"y1" = dbeta(x, alphas[1], betas[1]),
"y2" = dbeta(x, alphas[2], betas[2]),
"y3" = dbeta(x, alphas[3], betas[3]),
"y4" = dbeta(x, alphas[4], betas[4]),
"y5" = dbeta(x, alphas[5], betas[5])
)
pdf <- gather(pdf, tuple, y, y1, y2, y3, y4, y5)
pdf$tuple <- as.factor(pdf$tuple)
cdf <- data.frame(
"x" = x,
"y1" = pbeta(x, alphas[1], betas[1]),
"y2" = pbeta(x, alphas[2], betas[2]),
"y3" = pbeta(x, alphas[3], betas[3]),
"y4" = pbeta(x, alphas[4], betas[4]),
"y5" = pbeta(x, alphas[5], betas[5])
)
cdf <- gather(cdf, tuple, y, y1, y2, y3, y4, y5)
cdf$tuple <- as.factor(cdf$tuple)
ggplot(df, aes(x, y, colour = tuple)) +
geom_line(size = .5) +
facet_grid(tuple ~ pdfOrCdf, scales = "free", labeller = label_bquote(rows = paste("(", list(alpha, beta), ")") == .(as.character(tuple))))
df <- cbind(pdf, cdf)
df <- df[-c(4, 5)]
names(df) <- c("x", "tuple", "pdf_y", "cdf_y")
df <- gather(df, pdfOrCdf, y, pdf_y, cdf_y)
df$pdfOrCdf <- factor(df$pdfOrCdf)
df <- subset(df, !(df$y >=5))
ggplot(df, aes(x, y, colour = tuple)) +
geom_line(size = .5) +
facet_grid(tuple ~ pdfOrCdf, scales = "free", labeller = label_bquote(rows = paste("(", list(alpha, beta), ")") == .(as.character(tuple))))
df <- cbind(pdf, cdf)
df <- df[-c(4, 5)]
names(df) <- c("x", "tuple", "PDF", "CDY")
head(df)
ggplot(df, aes(x, y, colour = tuple)) +
geom_line(size = .5) +
facet_grid(tuple ~ pdfOrCdf, scales = "free", labeller =
label_bquote(rows =
paste("(",
list(alpha, beta),
")") == .(as.character(
tuple)))) +
theme()
ggplot(df, aes(x, y, colour = tuple)) +
geom_line(size = .5) +
facet_grid(tuple ~ pdfOrCdf, scales = "free", labeller =
label_bquote(rows =
paste("(",
list(alpha, beta),
")") == .(as.character(
tuple))))
ggplot(df, aes(x, y, colour = tuple)) +
geom_line(size = .5) +
facet_grid(tuple ~ pdfOrCdf, scales = "free", labeller = label_bquote(rows = paste("(", list(alpha, beta), ")") == .(as.character(tuple))))
df <- cbind(pdf, cdf)
df <- df[-c(4, 5)]
names(df) <- c("x", "tuple", "PDF", "CDY")
df <- gather(df, pdfOrCdf, y, PDF, CDF)
df$pdfOrCdf <- factor(df$pdfOrCdf)
names(df) <- c("x", "tuple", "PDF", "CDF")
df <- gather(df, pdfOrCdf, y, PDF, CDF)
df$pdfOrCdf <- factor(df$pdfOrCdf)
df <- subset(df, !(df$y >=5))
ggplot(df, aes(x, y, colour = tuple)) +
geom_line(size = .5) +
facet_grid(tuple ~ pdfOrCdf, scales = "free", labeller = label_bquote(rows = paste("(", list(alpha, beta), ")") == .(as.character(tuple))))
tuple_names <- c(
y1 = eval(expression(paste("(", alphas[1], ", ", betas[1], ")", sep = ""))),
y2 = eval(expression(paste("(", alphas[2], ", ", betas[2], ")", sep = ""))),
y3 = eval(expression(paste("(", alphas[3], ", ", betas[3], ")", sep = ""))),
y4 = eval(expression(paste("(", alphas[4], ", ", betas[4], ")", sep = ""))),
y5 = eval(expression(paste("(", alphas[5], ", ", betas[5], ")", sep = "")))
)
ggplot(df, aes(x, y, colour = tuple)) +
geom_line(size = .5) +
facet_grid(tuple ~ pdfOrCdf, scales = "free", labeller = label_bquote(rows = paste("(", list(alpha, beta), ")") == .(as.character(tuple_names))))
tuple_names <- list(
y1 = eval(expression(paste("(", alphas[1], ", ", betas[1], ")", sep = ""))),
y2 = eval(expression(paste("(", alphas[2], ", ", betas[2], ")", sep = ""))),
y3 = eval(expression(paste("(", alphas[3], ", ", betas[3], ")", sep = ""))),
y4 = eval(expression(paste("(", alphas[4], ", ", betas[4], ")", sep = ""))),
y5 = eval(expression(paste("(", alphas[5], ", ", betas[5], ")", sep = "")))
)
tuple_names
ggplot(df, aes(x, y, colour = tuple)) +
geom_line(size = .5) +
facet_grid(tuple ~ pdfOrCdf, scales = "free", labeller = label_bquote(rows = paste("(", list(alpha, beta), ")") == .(as.character(tuple_names))))
cdf <- data.frame(
"x" = x,
eval(expression(paste("(", alphas[1], ", ", betas[1], ")", sep = ""))) = pbeta(x, alphas[1], betas[1]),
eval(expression(paste("(", alphas[2], ", ", betas[2], ")", sep = ""))) = pbeta(x, alphas[2], betas[2]),
cdf <- data.frame(
"x" = x,
eval(expression(paste("(", alphas[1], ", ", betas[1], ")", sep = ""))) = pbeta(x, alphas[1], betas[1]),
cdf <- data.frame(
"x" = x,
expression(paste("(", alphas[1], ", ", betas[1], ")", sep = "")) = pbeta(x, alphas[1], betas[1]),
cdf <- data.frame(
"x" = x,
as.character(eval(expression(paste("(", alphas[1], ", ", betas[1], ")", sep = "")))) = pbeta(x, alphas[1], betas[1]),
library(reshape1)
library(reshape2)
?dcast
?aggregate
faithful
setwd("~/Documents/msan601/HW2")
source("linearBC.R")
source("bisectiobBC.R")
source("bisectionBC.R")
